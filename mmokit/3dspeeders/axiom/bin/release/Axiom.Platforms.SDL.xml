<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Axiom.Platforms.SDL</name>
    </assembly>
    <members>
        <member name="T:Axiom.Platforms.SDL.SdlTimer">
            <summary>
            	Encapsulates the functionality of the platform's highest resolution timer available.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlTimer.Start">
            <summary>
            Start this instance's timer.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlTimer.Reset">
            <summary>
            	Reset this instance's timer.
            </summary>
        </member>
        <member name="P:Axiom.Platforms.SDL.SdlTimer.Count">
            <summary>
            Gets a <see cref="T:System.UInt64"/> representing the 
            current tick count of the timer.
            </summary>
        </member>
        <member name="P:Axiom.Platforms.SDL.SdlTimer.Frequency">
            <summary>
            Gets a <see cref="T:System.UInt64"/> representing the 
            frequency of the counter in ticks-per-second.
            </summary>
        </member>
        <member name="P:Axiom.Platforms.SDL.SdlTimer.IsRunning">
            <summary>
            Gets a <see cref="T:System.Boolean"/> representing whether the 
            timer has been started and is currently running.
            </summary>
        </member>
        <member name="P:Axiom.Platforms.SDL.SdlTimer.Resolution">
            <summary>
            Gets a <see cref="T:System.Double"/> representing the 
            resolution of the timer in seconds.
            </summary>
        </member>
        <member name="P:Axiom.Platforms.SDL.SdlTimer.StartCount">
            <summary>
            Gets a <see cref="T:System.UInt64"/> representing the 
            tick count at the start of the timer's run.
            </summary>
        </member>
        <member name="T:Axiom.Platforms.SDL.SdlPlatformManager">
            <summary>
            	Platform management specialization for Microsoft Windows (r) platform.
            </summary>
        </member>
        <member name="F:Axiom.Platforms.SDL.SdlPlatformManager.inputReader">
            <summary>
            	Reference to the current input reader.
            </summary>
        </member>
        <member name="F:Axiom.Platforms.SDL.SdlPlatformManager.timer">
            <summary>
            	Reference to the current active timer.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlPlatformManager.CreateInputReader">
            <summary>
            	Creates an InputReader implemented using Microsoft DirectInput (tm).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlPlatformManager.CreateTimer">
            <summary>
            	Creates a high precision Windows timer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlPlatformManager.DoEvents">
            <summary>
            	Implements the Microsoft Windows (r) message pump for allowing the OS to process
            	pending events.
            </summary>
        </member>
        <member name="T:Axiom.Platforms.SDL.SdlInputReader">
            <summary>
            	Platform management specialization for Microsoft Windows (r) platform.
            </summary>
        </member>
        <member name="F:Axiom.Platforms.SDL.SdlInputReader.WheelStep">
            <summary>
            
            </summary>
        </member>
        <member name="F:Axiom.Platforms.SDL.SdlInputReader.BufferSize">
            <summary>
             Size of the arrays used to hold buffered input data.
            </summary>
        </member>
        <member name="F:Axiom.Platforms.SDL.SdlInputReader.isVisible">
            <summary>
            	Is the SDL window currently visible? 
            </summary>
        </member>
        <member name="F:Axiom.Platforms.SDL.SdlInputReader.events">
            <summary>
            	Array to use for holding buffered event data.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.#ctor">
            <summary>
            	Constructor.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.Finalize">
            <summary>
            	Destructor.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.Capture">
            <summary>
            	Capture the current state of SDL input.
            </summary>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.Initialize(Axiom.Graphics.RenderWindow,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="useKeyboard"></param>
            <param name="useMouse"></param>
            <param name="useGamepad"></param>
            <param name="ownMouse"></param>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.IsKeyPressed(Axiom.Input.KeyCodes)">
            <summary>
            	Checks the current keyboard state to see if the specified key is pressed.
            </summary>
            <param name="key">KeyCode to check.</param>
            <returns>true if the key is down, false otherwise.</returns>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.ConvertKeyEnum(Axiom.Input.KeyCodes)">
            <summary>
            	Used to convert an Axiom.Input.KeyCodes enum val to a Sdl enum val.
            </summary>
            <param name="key">Axiom keyboard code to query.</param>
            <returns>The equivalent enum value in the Sdl enum.</returns>
        </member>
        <member name="M:Axiom.Platforms.SDL.SdlInputReader.ConvertKeyEnum(System.Int32)">
            <summary>
            	Used to convert a Sdl enum val to a Axiom.Input.KeyCodes enum val.
            </summary>
            <param name="key">Sdl code to query.</param>
            <returns>The equivalent enum value in the Axiom.KeyCodes enum.</returns>
        </member>
    </members>
</doc>

<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ImageBox.ErrorImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>